application {
  name = continuous-env
}

clustering {
  ip = "0.0.0.0"
  port = 2551
  supervisor {
    ip = "0.0.0.0"
    port = 2551
  }
  min-nr-of-members = 1
}

xinuk {
  classes = [
    "pl.edu.agh.continuous.env.model.ContinuousEnvCell",
    "pl.edu.agh.continuous.env.algorithm.ContinuousEnvMetrics",
  ]
}

continuous-env {
  config {
    worldType = grid
    worldWidth = 25
    worldHeight = 25
    iterationsNumber = 100000
    deltaTime = 0.1

    signalSuppressionFactor = 0.9
    signalAttenuationFactor = 0.6
    signalSpeedRatio = 2

    workersRoot = 1
    isSupervisor = true
    shardingMod = 144

    guiType = grid
    guiCellSize = 40

    cellSize = 200

    initialSignal = 10

    maxAgentRadius = 30

    personUnitAcceleration = 100.0
    personMinStepLength = 1.0

    # in CM
    obstacles = [
    #####################
    ## narrowing corridor test
#         {
#             xs = [2650, 5000, 5000, 2650]
#             ys = [0, 0, 1000, 999]
#             points = 4
#         },
#         {
#             xs = [0, 2350, 2350, 0]
#             ys = [0, 0, 999, 1000]
#             points = 4
#         },
#             var base : Vec2  = new Vec2(1350, 150);
#             var step : Vec2  = new Vec2(100,100);
#
#             for(x <- 0 to 23)
#               for(y <- 0 to 20)
#               {
#                   var pos = base + step * new Vec2(x.doubleValue, y.doubleValue);
#                   var rad = scala.util.Random.nextFloat() * 0 + 20;
#                   var speed = scala.util.Random.nextFloat() * 0 + 120;
#                   runners = runners.appended(new RunnerDefinition(pos.x, pos.y, rad, speed, "R"));
#               }

#       val continuousEnvCell: ContinuousEnvCell = if (x == 23 && y >=11 && y <=13) {
#         ContinuousEnvCell(config.initialSignal, gridMultiCellId)
#       } else {
#         ContinuousEnvCell(Signal.zero, gridMultiCellId)
#       }
    #####################

###############################
## 4 road intersection
        {
            xs = [0, 1999, 1999, 0]
            ys = [0, 0, 1999, 1999]
            points = 4
        },
        {
            xs = [3001, 5000, 5000, 3001]
            ys = [0, 0, 1999, 1999]
            points = 4
        },
        {
            xs = [0, 1999, 1999, 0]
            ys = [3001, 3001, 5000, 5000]
            points = 4
        },
        {
            xs = [3001, 5000, 5000, 3001]
            ys = [3001, 3001, 5000, 5000]
            points = 4
        },
    ]
  }
}